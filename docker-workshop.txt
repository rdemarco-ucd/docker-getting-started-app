# Part 1: Containerize an application
# Build the app's image. To build the image you'll need to use a Dockerfile.

# 1. In the getting-started-app directory, the same location as the package.json file, create a file named Dockerfile with the following contents:
# syntax=docker/dockerfile:1

FROM node:lts-alpine
WORKDIR /app
COPY . .
RUN yarn install --production
CMD ["node", "src/index.js"]
EXPOSE 3000

# 2. Build the image using the following commands:
$ cd /path/to/getting-started-app

# build the image
$ docker build -t getting-started .

<#
The docker build command uses the Dockerfile to build a new image. You instructed the builder that you wanted to start from 
the node:lts-alpine image. But, since you didn't have that on your machine, Docker needed to download the image.

After Docker downloaded the image, the instructions from the Dockerfile copied in your application and used yarn to install your 
application's dependencies. The CMD directive specifies the default command to run when starting a container from this image.

Finally, the -t flag tags your image. Think of this as a human-readable name for the final image. Since you named the image 
getting-started, you can refer to that image when you run a container.

The . at the end of the docker build command tells Docker that it should look for the Dockerfile in the current directory.
#>

# Start an app container
# Now that you have an image, you can run the application in a container using the docker run command

# 1. Run your container using the docker run command and specify the name of the image you just created:
$ docker run -d -p 127.0.0.1:3000:3000 getting-started

<#
The -d flag (short for --detach) runs the container in the background. This means that Docker starts your container and returns 
you to the terminal prompt. Also, it does not display logs in the terminal.

The -p flag (short for --publish) creates a port mapping between the host and the container. The -p flag takes a string value in 
the format of HOST:CONTAINER, where HOST is the address on the host, and CONTAINER is the port on the container. The command publishes 
the container's port 3000 to 127.0.0.1:3000 (localhost:3000) on the host. Without the port mapping, you wouldn't be able to access the 
application from the host.

Note: If the browser doesn't run the app, check for port conflicts in the source code (i.e. hard coded ports)
#>

# 2. After a few seconds, you should be able to open your web browser to http://localhost:3000 and see your app
# 3. Add an item or two to see that your frontend is successfully storing items in the backend.

<#
If you take a quick look at your containers, you should see at least one container running that's using the getting-started image 
and on port 3000. To see your containers, you can use the CLI or Docker Desktop's graphical interface.
#>
$ docker ps


# Part 2: Update the application

# Update the source code
# 1. In the src/static/js/app.js file, update line 56 to use the new empty text.
- <p className="text-center">No items yet! Add one above!</p>
+ <p className="text-center">You have no todo items yet! Add one above!</p>

<#
Note: you aren't able to start the new container while your old container is still running. The reason is that the old container 
is already using the host's port 3000 and only one process on the machine (containers included) can listen to a specific port. 
To fix this, you need to remove the old container.
#>

# Remove the old container
# 1. Get the ID of the container by using the docker ps command.
$ docker ps

# 2. Use the docker stop command to stop the container. Replace <the-container-id> with the ID from docker ps.
$ docker stop <the-container-id>

# 3. Once the container has stopped, you can remove it by using the docker rm command.
$ docker rm <the-container-id>

# Note: You can stop and remove a container in a single command by adding the force flag to the docker rm command.
$ docker rm -f <the-container-id>

# Start the updated app CONTAINER
# 1. Now, start your updated app using the docker run command.
$ docker run -dp 127.0.0.1:5000:5000 docker-getting-started

# 2. Refresh your browser and you should see the updated help text.

# Share the application
<# 
To share Docker images, you have to use a Docker registry. The default registry is Docker Hub and is where all of the images 
you've used have come from.
#>

# Create a repository
# To push an image, you first need to create a repository on Docker Hub
<# 
1. Sign up/Sign in to Docker Hub
2. Select Create Repository button
3. Give the repository a name (e.g. docker-getting-started)
4. Select Create.
#>


# Push the image

# 1. In the command line, run the docker push command that you see on Docker Hub. 
# Note that your command will have your Docker ID, not "docker". For example, docker push YOUR-USER-NAME/getting-started.
$ docker push rdemarcoucd/docker-getting-started
The push refers to repository [docker.io/docker/docker-getting-started]
An image does not exist locally with the tag: docker/docker-getting-started

<#
Why did it fail? The push command was looking for an image named docker/docker-getting-started, but didn't find one. 
If you run docker image ls, you won't see one either.

To fix this, you need to tag your existing image you've built to give it another name.
#>

# 2. Sign in to Docker Hub using the command docker login -u YOUR-USER-NAME.
# 3. Use the docker tag command to give the docker-getting-started image a new name. Replace YOUR-USER-NAME with your Docker ID.
$ docker tag docker-getting-started YOUR-USER-NAME/docker-getting-started

# 4. Now run the docker push command again. If you're copying the value from Docker Hub, you can drop the tagname part, as you didn't 
#	 add a tag to the image name. If you don't specify a tag, Docker uses a tag called latest.
$ docker push rdemarcoucd/docker-getting-started

# Run the image on a new instance
<# 
Now that your image has been built and pushed into a registry, try running your app on a brand new instance that has never seen this 
container image. To do this, you will use Play with Docker.
#>

# 1. Open your browser to Play with Docker. https://labs.play-with-docker.com/
# Follow the steps in https://docs.docker.com/get-started/workshop/04_sharing_app/ tutorial